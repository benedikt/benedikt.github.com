<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Benedikt Deicke - Software Engineer</title>
  <id>http://benediktdeicke.com/</id>
  <link href="http://benediktdeicke.com/"/>
  <link href="http://feeds.feedburner.com/benediktdeicke" rel="self"/>
  <updated>2014-01-02T00:00:00Z</updated>
  <author>
    <name>Benedikt Deicke</name>
  </author>
  <entry>
    <title>Reading List 2014</title>
    <link rel="alternate" href="/2014/01/reading-list-2014/"/>
    <id>/2014/01/reading-list-2014/</id>
    <published>2014-01-02T00:00:00Z</published>
    <updated>2014-01-02T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;I’ve always been a fan of &lt;a href="http://www.paperplanes.de/2014/12/30/reading-list-2014.html"&gt;Mathias Meyer’s reading lists&lt;/a&gt;. They’re one of my go-to resources to discover interesting books to read. While I didn’t read nearly as many books as he did, I wanted to share the books read in 2014 in the same vein. So here it is: my reading list of 2014!&lt;/p&gt;

&lt;h2 id="toc_0"&gt;&lt;a href="http://www.amazon.de/gp/product/0670919519/ref=as_li_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=0670919519&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=YJ5MC7EYAWZJ7ZZB"&gt;The Personal MBA&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Josh Kaufman’s book gives an birds-eye view about all business related topics. He covers value creation...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I’ve always been a fan of &lt;a href="http://www.paperplanes.de/2014/12/30/reading-list-2014.html"&gt;Mathias Meyer’s reading lists&lt;/a&gt;. They’re one of my go-to resources to discover interesting books to read. While I didn’t read nearly as many books as he did, I wanted to share the books read in 2014 in the same vein. So here it is: my reading list of 2014!&lt;/p&gt;

&lt;h2 id="toc_0"&gt;&lt;a href="http://www.amazon.de/gp/product/0670919519/ref=as_li_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=0670919519&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=YJ5MC7EYAWZJ7ZZB"&gt;The Personal MBA&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Josh Kaufman’s book gives an birds-eye view about all business related topics. He covers value creation, marketing, sales, value delivery, and finance. On top of that he also talks about the human mind, how to work with yourself and others, and how to understand/analyze and improve systems.&lt;/p&gt;

&lt;p&gt;The book is split up into short sections about each aspect of the general topics. This makes it easy to quickly pick up the book and read a few sections, even when you only have a few minutes of time. &lt;/p&gt;

&lt;p&gt;The Personal MBA is a great book if you want to get up to speed with the general ideas on running a business. Additionally it includes a huge list of books with more in-depth information. &lt;/p&gt;

&lt;h2 id="toc_1"&gt;&lt;a href="http://www.amazon.de/gp/product/B00LA95B68/ref=as_li_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=B00LA95B68&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=RSSHJZTCVFGZJIJV"&gt;Startup Growth Engines&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Judging by the title of the book, this sounded like an interesting read. Unfortunately it was not. The book is merely a collection of blog posts featuring successful startups. The observations about each startup are shallow and I didn’t get any actionable advise from it. &lt;/p&gt;

&lt;h2 id="toc_2"&gt;&lt;a href="http://doubleyourfreelancing.com/rate/"&gt;Double Your Freelancing Rate&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I’ve already read the first edition of Double Your Freelancing Rate in 2013. This year, Brennan Dunn released a new edition of the book in which he rewrote several parts of it. The book is packed with actionable advise on how to improve ones success as a freelancer. It helped me outline a process that allows me to position my services as a valuable investment towards my client’s goals. &lt;/p&gt;

&lt;p&gt;I highly recommend this book to everyone who&amp;#39;s freelancing. It comes with a great collection of useful worksheets and templates so you can start working on your business right away. &lt;/p&gt;

&lt;h2 id="toc_3"&gt;&lt;a href="http://uibreakfast.com/mastering-app-presentation/"&gt;Mastering App Presentation&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this book, Jane Portman talks about how to properly present your application. Whether it is presenting the work you did for a client or designing the marketing website for one of your applications, the book has you covered. While the examples mostly talk about mobile applications, a lot of it is easily applicable to web and desktop applications as well. &lt;/p&gt;

&lt;h2 id="toc_4"&gt;&lt;a href="http://www.amazon.de/gp/product/1439199191/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=1439199191&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=O5V6QYZZZWHNU4R3"&gt;How to Win Friends and Influence People&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When I first came across this book, I was a bit put off by it. However I kept seeing this classic (first published in 1936) recommended by a lot of people. Eventually my friend Christoph sent it to me as a gift. &lt;/p&gt;

&lt;p&gt;After reading it, I realized the book is not about manipulating other people, but yourself. Dale Carnegie teaches a couple of valuable lessons that really changed how I perceive and interact with other people. In that regard, it’s the most valuable book I read this year.&lt;/p&gt;

&lt;h2 id="toc_5"&gt;&lt;a href="http://www.amazon.de/gp/product/B00GRBIFH6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=B00GRBIFH6&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=ZK36J37XX5ELAKIF"&gt;Everything I Know&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In “Everything I Know”, Paul Jarvis shares his experiences and  lessons learned as a professional in the creative industry. It was a quick and interesting read, but I didn’t get much out of it. &lt;/p&gt;

&lt;h2 id="toc_6"&gt;&lt;a href="http://www.amazon.de/gp/product/B0031RDVVY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=B0031RDVVY&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=UODJUS2AVZEBAPQY"&gt;The Knack&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In “The Knack”, Norm Brodsky and Bo Burlingham write about lessons learned while running a business. Each lesson is backed by a real-life story. This makes it easy to understand the idea behind it, as well as to remember them later on. &lt;/p&gt;

&lt;p&gt;The book is filled with experience you don’t yet have when you’re just starting out. Instead of learning everything the hard way, I highly recommend reading this book. &lt;/p&gt;

&lt;h2 id="toc_7"&gt;&lt;a href="http://www.amazon.de/gp/product/B00AZRBLHO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=B00AZRBLHO&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=5FG2GCVLKK5FJM64"&gt;The Phoenix Project&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The Phoenix Project is a primer on DevOps and Lean Manufacturing masked as a fiction book. It tells the story of Bill, an IT director who suddenly finds himself becoming the vice president of IT operations. The company he’s working at, has huge problems releasing new software for their internal processes. If you’re working in IT, you’ll most likely recognize some of the problems they are facing. In the course of the story, Bill learns how to fix these problems by applying principles of lean manufacturing. &lt;/p&gt;

&lt;p&gt;It is a fun read, even if you&amp;#39;re already familiar with the ideas behind DevOps and Lean. &lt;/p&gt;

&lt;h2 id="toc_8"&gt;&lt;a href="https://www.masteringmodernpayments.com"&gt;Mastering Modern Payments&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To my own surprise this is the only programming related book I’ve read this year. In August, I implemented payments into my product &lt;a href="http://stagecms.com"&gt;Stage&lt;/a&gt; and Pete Keen’s book was a helpful guide. His book goes beyond the resources Stripe provides on their website and covers everything from one-time payments to subscriptions and marketplaces. &lt;/p&gt;

&lt;h2 id="toc_9"&gt;&lt;a href="http://www.amazon.de/gp/product/0340920750/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=0340920750&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=5UL3ZSNT7ZIKHDW2"&gt;The Swarm&lt;/a&gt; &amp;amp; &lt;a href="http://www.amazon.de/gp/product/3442380294/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1638&amp;amp;creative=6742&amp;amp;creativeASIN=3442380294&amp;amp;linkCode=as2&amp;amp;tag=beneddeick-21&amp;amp;linkId=H3RQT4WQAXISHAD5"&gt;Black Out&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In addition to the non-fiction books, I read two more fiction books this year: The Swarm and Black Out. I enjoyed both a lot.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ActionWidgets: Rails helpers on steroids</title>
    <link rel="alternate" href="/2013/05/action-widgets-rails-helpers-on-steroids/"/>
    <id>/2013/05/action-widgets-rails-helpers-on-steroids/</id>
    <published>2013-05-21T00:00:00Z</published>
    <updated>2013-05-21T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;More than once writing view code for a Rails application ends up with a messy template file. The separation of structure and style doesn&amp;#39;t always work out as intended. Frameworks like Bootstrap force you to use nested structures and lots of class attributes. The view code ends up with a lot of duplication and is hard to read as a result. You&amp;#39;ll get away with that for a while, constantly fearing the next redesign&amp;hellip;&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;More than once writing view code for a Rails application ends up with a messy template file. The separation of structure and style doesn&amp;#39;t always work out as intended. Frameworks like Bootstrap force you to use nested structures and lots of class attributes. The view code ends up with a lot of duplication and is hard to read as a result. You&amp;#39;ll get away with that for a while, constantly fearing the next redesign&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To tackle this, you probably start writing helper methods. They help to remove logic out of the template and hide overly complex structures behind a nice interface. Unfortunately some view components are more complex to implement and require more than just a single method. This is even more true when you need to configure the view components in some way or another.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Introducing ActionWidgets&lt;/h2&gt;

&lt;p&gt;In the following, I&amp;#39;ll present you a different approach to this issue: &lt;a href="https://github.com/t6d/action_widget"&gt;ActionWidget&lt;/a&gt;. The gem by &lt;a href="https://twitter.com/t6d"&gt;Konstantin Tennhard&lt;/a&gt; takes helper methods to the next level. The basic idea is simple, instead of writing a complex helper method, you&amp;#39;ll write a class inheriting from &lt;code&gt;ActionWidget::Base&lt;/code&gt; and put it into the &lt;code&gt;app/widgets&lt;/code&gt; directory. The only method you have to implement is the &lt;code&gt;render&lt;/code&gt; method. The ActionWidget gem, will provide you with a simple helper method to use your widget automatically. Let me show you a simple example.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;A simple button widget&lt;/h3&gt;

&lt;p&gt;To illustrate the basic usage of ActionWidget, let&amp;#39;s write a widget to represent a button. The button will have a title, a target, a type (default, primary, or danger) and a size (small, default, or large). For convenience, the gem provides a generator to get you started:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::shell-unix-generic
rails generate action_widget:widget button
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generator creates a file called &lt;code&gt;app/widgets/button_widget.rb&lt;/code&gt; for you. This is where the implementation of the button widget lives. An example implementation might look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
# app/widgets/button_widget.rb
class ButtonWidget &amp;lt; ActionWidget::Base

  property :title,
    :converts =&amp;gt; :to_s,
    :required =&amp;gt; true

  property :target,
    :converts =&amp;gt; :to_s,
    :required =&amp;gt; true

  property :type,
    :converts =&amp;gt; :to_sym,
    :accepts  =&amp;gt; [:default, :primary, :danger],
    :default  =&amp;gt; :default

  property :size,
    :converts =&amp;gt; :to_sym,
    :accepts  =&amp;gt; [:small, :default, :large],
    :default  =&amp;gt; :default

  def render
    content_tag(:a, title, :href =&amp;gt; target, :class =&amp;gt; css_classes)  
  end

protected

  def css_classes
    css_classes = [&amp;#39;btn&amp;#39;]
    css_classes &amp;lt;&amp;lt; &amp;quot;btn-#{size}&amp;quot; unless size == :default
    css_classes &amp;lt;&amp;lt; &amp;quot;btn-#{type}&amp;quot; unless type == :default
    css_classes
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ActionWidget gem depends on &lt;a href="https://github.com/t6d/smart_properties"&gt;Smart Properties&lt;/a&gt; to provide the &lt;code&gt;property&lt;/code&gt; macro method. This allows you to add simple configuration values to your widget. It&amp;#39;ll also do conversion and input validation for you. With the implementation above, you&amp;#39;ll be forced to always provide a title and a target attribute for every button. Otherwise the widget will complain with an exception. &lt;/p&gt;

&lt;p&gt;Using the button widget in your view is as simple as a call to the (automatically generated) &lt;code&gt;button_widget&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
button_widget :title =&amp;gt; &amp;#39;Sign Up&amp;#39;,
  :target =&amp;gt; signup_path,
  :type =&amp;gt; :primary,
  :size =&amp;gt; :large
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have a basic understanding of the idea behind ActionWidgets, let&amp;#39;s dive into a more complex example. &lt;/p&gt;

&lt;h3 id="toc_2"&gt;A more advanced example&lt;/h3&gt;

&lt;p&gt;Tabs are a pretty common user interface element and their implementation is pretty straight forward. Let&amp;#39;s look at the implementation of tabs, on a site using Twitter Bootstrap: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::html
&amp;lt;ul class=&amp;quot;nav nav-tabs&amp;quot; id=&amp;quot;myTab&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#first&amp;quot;&amp;gt;First&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;active&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#second&amp;quot;&amp;gt;Second&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#third&amp;quot;&amp;gt;Third&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;div class=&amp;quot;tab-content&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;tab-pane&amp;quot; id=&amp;quot;first&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;tab-pane active&amp;quot; id=&amp;quot;second&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;tab-pane&amp;quot; id=&amp;quot;third&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To implement the tabs, you need a list with links for each tab and a collection of tab panes. For every &lt;code&gt;href&lt;/code&gt; attribute of each link, there must be a corresponding tab pane with its &lt;code&gt;id&lt;/code&gt; attribute set accordingly. Additionally, the &lt;code&gt;active&lt;/code&gt; class has to match, or your users will be a bit confused when clicking through the tabs. Of course when adding the tabs to one of your pages, you&amp;#39;ll have to remember all the details of the markup that&amp;#39;s required. There has to be both the &lt;code&gt;nav&lt;/code&gt; and &lt;code&gt;nav-tabs&lt;/code&gt; class in the &lt;code&gt;ul&lt;/code&gt; tag, and don&amp;#39;t forget the wrapping &lt;code&gt;div&lt;/code&gt; tag with class &lt;code&gt;tab-content&lt;/code&gt; around all the &lt;code&gt;tab-pane&lt;/code&gt; elements. That&amp;#39;s a lot to remember, and a lot to mess up. If you don&amp;#39;t screw it up now, then probably later when you try to change something quickly. To make your life a little easier, I&amp;#39;ll show you how to use ActionWidgets to hide the markup behind this expressive interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
= tabs_widget do |t|
  = t.tab &amp;#39;First&amp;#39; do
    Content of the first tab

  = t.tab &amp;#39;Second&amp;#39;, :active =&amp;gt; true do
    Content of the second tab

  = t.tab &amp;#39;Third&amp;#39; do
    Content of the third tab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#39;m using Haml in this example, but that&amp;#39;s not a requirement. ActionWidgets work with all of your templates, as long as they support helper methods.&lt;/p&gt;

&lt;h4 id="toc_3"&gt;Building the TabsWidget&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s start by generating the &lt;code&gt;TabsWidget&lt;/code&gt; class. Again, it&amp;#39;s as simple as creating a file called &lt;code&gt;app/widgets/tabs_widget.rb&lt;/code&gt; or running the generator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
class TabsWidget &amp;lt; ActionWidget::Base

  def render(&amp;amp;block)
    navigation = content_tag(:ul, :class =&amp;gt; [&amp;#39;nav&amp;#39;, &amp;#39;nav-tabs&amp;#39;]) do
      capture(self, &amp;amp;block)
    end

    contents = content_tag(:div, :class =&amp;gt; [&amp;#39;tab-content&amp;#39;]) do
      tabs.each do |tab|
        concat(tab.render)
      end
    end

    navigation + contents
  end

  def tab(*args)
    # We&amp;#39;ll implement this soon...
  end

private

  def tabs
    @tabs ||= []
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every ActionWidget has to implement a &lt;code&gt;render&lt;/code&gt; method. If the generated helper method gets passed a block, it will be handed to this method as well. Every ActionWidget has delegators to all the methods in your view. We use this to our advantage and use &lt;code&gt;capture&lt;/code&gt; to get the contents of the block. We also pass &lt;code&gt;self&lt;/code&gt;, which makes it possible to call the widget&amp;#39;s &lt;code&gt;tab&lt;/code&gt; method from within the block. The captured contents get wrapped in the necessary &lt;code&gt;ul&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Next we create a &lt;code&gt;div&lt;/code&gt; tag to wrap the tab contents. We iterate over the collection of tabs and render each one. By using &lt;code&gt;concat&lt;/code&gt; we make sure, that the rendered tab-pane actually gets appended to the view.&lt;/p&gt;

&lt;p&gt;With this code in place, we don&amp;#39;t get an error when trying to view the page we&amp;#39;re embedding the tabs widget in, but we don&amp;#39;t see the tabs either.&lt;/p&gt;

&lt;h4 id="toc_4"&gt;Adding a nested TabWidget&lt;/h4&gt;

&lt;p&gt;The general idea behind ActionWidget is to use objects instead of a set of methods to generate markup code. In this spirit, let&amp;#39;s add another ActionWidget to represent a single tab. It&amp;#39;s pretty useless without the wrapping tabs widget, so let&amp;#39;s add it as a nested class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
class TabsWidget &amp;lt; ActionWidget::Base

  class Tab &amp;lt; ActionWidget::Base

    property :name,
      :required =&amp;gt; true,
      :converts =&amp;gt; :to_s

    property :active,
      :accepts =&amp;gt; [true, false],
      :default =&amp;gt; false

    property :target,
      :converts =&amp;gt; :to_s


    property :content,
      :required =&amp;gt; true

    def render
      content_tag(:div, :id =&amp;gt; target, :class =&amp;gt; [&amp;#39;tab-pane&amp;#39;] + css_classes, &amp;amp;content)
    end

    def render_navigation
      content_tag(:li, :class =&amp;gt; [&amp;#39;tab&amp;#39;] + css_classes) do
        link_to(name, &amp;#39;#&amp;#39; + target)
      end
    end

    def target
      super || name.parameterize
    end

  private

    def css_classes
      css_classes = []
      css_classes &amp;lt;&amp;lt; &amp;#39;active&amp;#39; if active
      css_classes
    end

  end

  # ...

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the class is quite simple. Apart from defining a set of properties, it has two render methods. One to render the tab pane, and another one to render the navigation link. They both make use of the &lt;code&gt;target&lt;/code&gt; method so the link&amp;#39;s &lt;code&gt;href&lt;/code&gt; attribute matches the tab pane&amp;#39;s &lt;code&gt;id&lt;/code&gt; attribute. The private &lt;code&gt;css_classes&lt;/code&gt; method makes sure, both elements get the &lt;code&gt;active&lt;/code&gt; class when the tab is active.&lt;/p&gt;

&lt;p&gt;Now everything we need to do is to tie the &lt;code&gt;TabsWidget&lt;/code&gt; and the &lt;code&gt;TabsWidget::Tab&lt;/code&gt; together, usin the &lt;code&gt;TabsWidget#tab&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
def tab(name, options = {}, &amp;amp;block)
  options.merge!({
    :name =&amp;gt; name,
    :content =&amp;gt; block
  })

  tab = Tab.new(view, options)
  tabs &amp;lt;&amp;lt; tab
  tab.render_navigation
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method creates a new instance of the &lt;code&gt;TabsWidget::Tab&lt;/code&gt; widget, while passing both the view context and a options hash to it. Afterwards it adds the tab to the collection and renders the navigation link.&lt;/p&gt;

&lt;p&gt;Now we have everything in place to render tab widgets with a few lines of nice and expressive code. Should you ever need to change the implementation of all tab widgets on your website, you now have a single place to do this.&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;ActionWidget allows you to separate the concept of a view component from the actual implementation. In contrast to the presenter pattern, the widgets don&amp;#39;t necessarily need to wrap a model object. As they are implemented in classes, it&amp;#39;s easy to extend them. Additionally the possibility to use private methods internally makes their code easier to maintain than standard helper methods.&lt;/p&gt;

&lt;p&gt;Hopefully this short introduction made you curious about the ActionWidget approach and gives you some pointers to implement some (or all?) of your user interface components using this gem. Unfortunately there&amp;#39;s no documentation for it yet, but as the &lt;a href="https://github.com/t6d/action_widget"&gt;gem&amp;#39;s code&lt;/a&gt; is pretty simple and I covered the basic idea in this article, you should be able to get started easily.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I'm going freelance</title>
    <link rel="alternate" href="/2013/02/i-am-going-freelance/"/>
    <id>/2013/02/i-am-going-freelance/</id>
    <published>2013-02-25T00:00:00Z</published>
    <updated>2013-02-25T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;More than two years ago, I joined &lt;a href="https://flinc.org"&gt;flinc&lt;/a&gt; as a Rails developer. During this time, I helped building, launching and maintaining the realtime ride sharing network. From april on, I'm going to work as a freelance software engineer. It's not totally new for me, but it's the first time it'll be my main source of income.&lt;/p&gt;

&lt;p&gt;Besides doing freelance software development work, I'm planning to focus more on my...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;More than two years ago, I joined &lt;a href="https://flinc.org"&gt;flinc&lt;/a&gt; as a Rails developer. During this time, I helped building, launching and maintaining the realtime ride sharing network. From april on, I&amp;#39;m going to work as a freelance software engineer. It&amp;#39;s not totally new for me, but it&amp;#39;s the first time it&amp;#39;ll be my main source of income.&lt;/p&gt;

&lt;p&gt;Besides doing freelance software development work, I&amp;#39;m planning to focus more on my own projects. One of them is &amp;ndash; of course &amp;ndash; this blog, which has been neglected for far too long. Additionally I&amp;#39;ve got some other projects in mind, that I&amp;#39;m going to announce here eventually. &lt;/p&gt;

&lt;p&gt;During the upcoming weeks, I&amp;#39;ll update my website to provide some more information about my services and past work. In the meantime, please don&amp;#39;t hesitate to &lt;a href="mailto:benedikt@benediktdeicke.com"&gt;contact me&lt;/a&gt; in case you want me to help you develop your product.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What you did not know about Capistrano, yet</title>
    <link rel="alternate" href="/2013/02/what-you-did-not-know-about-capistrano-yet/"/>
    <id>/2013/02/what-you-did-not-know-about-capistrano-yet/</id>
    <published>2013-02-14T00:00:00Z</published>
    <updated>2013-02-14T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;Like any other build process, deploying Rails applications should be a quick and easy task. You should be able to deploy everything to your server with just one command. There are several tools available for this task. One of them is &lt;a href="https://github.com/capistrano/capistrano"&gt;Capistrano&lt;/a&gt;, which is probably the oldest and by far the most popular deployment tool in the Rails community. Unfortunately the &lt;a href="https://github.com/capistrano/capistrano/wiki"&gt;documentation&lt;/a&gt; is still not great and...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Like any other build process, deploying Rails applications should be a quick and easy task. You should be able to deploy everything to your server with just one command. There are several tools available for this task. One of them is &lt;a href="https://github.com/capistrano/capistrano"&gt;Capistrano&lt;/a&gt;, which is probably the oldest and by far the most popular deployment tool in the Rails community. Unfortunately the &lt;a href="https://github.com/capistrano/capistrano/wiki"&gt;documentation&lt;/a&gt; is still not great and a lot of very handy features are unknown to many. Only digging through the API documentation and the &lt;a href="http://rubydoc.info/github/capistrano/capistrano/master/frames"&gt;source code&lt;/a&gt; reveals them.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Variables&lt;/h2&gt;

&lt;p&gt;A lot of tasks for deploying Rails applications are the same for almost every application. They only differ by minor aspects such as the path to deploy to, or the branch to checkout the code from. Capistrano allows setting these aspects using variables. Setting a variable is as simple as calling &lt;code&gt;set :name, &amp;#39;value&amp;#39;&lt;/code&gt;. Accessing a previously defined variable is even easier by just using it as a ruby method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
set :name, &amp;#39;value&amp;#39;
puts name # Prints &amp;#39;value&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However there are some aspects of Capistrano variables that make them really useful. &lt;/p&gt;

&lt;h3 id="toc_1"&gt;Accessing variables that might not exist&lt;/h3&gt;

&lt;p&gt;In some cases you don&amp;#39;t want to set every single variable to configure certain aspects of a task. But this comes with a problem. Accessing a variable that has not been defined before, will make Capistrano yell at you and crash with a &lt;code&gt;NameError&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;There are two ways to handle this. One of them is to define all variables with sane defaults and overwrite them as needed afterwards. The other one, and by far my preferred one, is to use Capistrano&amp;#39;s &lt;code&gt;fetch&lt;/code&gt; method. It allows you to access a variable and additionally provide a default that will be returned when the variable is not defined, yet. This allows you to write flexible tasks without having to define every single variable upfront. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
fetch(:some_setting, false)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_2"&gt;Setting variables via the command line&lt;/h3&gt;

&lt;p&gt;Another very useful feature is the possibility to set variables via the command line. Appending a &lt;code&gt;-S variable_name=value&lt;/code&gt; option to the command line will set the given variable to the given value. This comes with a minor caveat, though. Any call of &lt;code&gt;set&lt;/code&gt; with the same variable name will overwrite the value set by the command line option. Luckily Capistrano&amp;#39;s &lt;code&gt;exists?&lt;/code&gt; method allows you to check for the existence of a variable. This allows you to only set a variable if it doesn&amp;#39;t exist yet. You might change your &lt;code&gt;set :branch&lt;/code&gt; call to something like this: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
set(:branch, &amp;#39;staging&amp;#39;) unless exists?(:branch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows you to deploy any branch to your staging servers without fiddling with the configuration files, just by appending &lt;code&gt;-S branch=other-branch&lt;/code&gt; to your &lt;code&gt;cap deploy&lt;/code&gt; call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::shell-unix-generic
cap deploy -S branch=awesome-new-feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Combining the ability to set variables via the command line with the previously explained &lt;code&gt;fetch&lt;/code&gt; method is also useful to toggle certain aspects of your deployment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
namespace :translations do
  task :update do
    if fetch(:with_translations, true)
      # Download current translations from your translation service provider
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_3"&gt;Reading passwords from STDIN&lt;/h3&gt;

&lt;p&gt;Variables are great to store your configuration options. There&amp;#39;s just one exception: Passwords. You probably don&amp;#39;t want to have your production database password checked into your repository.
This is where Capistrano&amp;#39;s command line interface tools come in handy. It allows you, among several other options, to read passwords from STDIN. It even makes sure your terminal won&amp;#39;t print it while you&amp;#39;re typing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
Capistrano::CLI.password_prompt(&amp;#39;Enter database password: &amp;#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_4"&gt;Task descriptions&lt;/h2&gt;

&lt;p&gt;As you probably know, it&amp;#39;s possible to list all available tasks using &lt;code&gt;cap -T&lt;/code&gt;. This will print a list of all available commands. Every task with a description will show up in this list. Adding a description is easy. Just prepend the task definition with a &lt;code&gt;desc&lt;/code&gt; call, passing it a string.&lt;/p&gt;

&lt;h3 id="toc_5"&gt;Adding extended description&lt;/h3&gt;

&lt;p&gt;Each defined task may also have an extended description. To show it, simply execute &lt;code&gt;cap -e task name&lt;/code&gt;. Adding an extended description works just like adding the short description explained above. Just like &lt;code&gt;git commit&lt;/code&gt;, Capistrano will use the first paragraph as short description and every following paragraph as extended description. Ruby&amp;#39;s heredoc literal is handy when defining extended descriptions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
desc &amp;lt;&amp;lt;-EOS
  This is a short description that is visible in the `cap -T` list

  This the extended description that is visible when executing `cap -e task name`
EOS
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_6"&gt;Hiding internal tasks&lt;/h3&gt;

&lt;p&gt;Some tasks you&amp;#39;ll define for your deployment process are not intended to be executed manually and therefore shouldn&amp;#39;t show up when using &lt;code&gt;cap -T&lt;/code&gt;. The simplest way to prevent this, is to not give them any description. However, in some cases, a description would be useful for later reference and documentation. By prepending the description with &lt;code&gt;[internal]&lt;/code&gt; you can hide the task from the &lt;code&gt;cap -T&lt;/code&gt; list. It will then only be visible when executing &lt;code&gt;cap -vT&lt;/code&gt;, which will list absolutely all defined tasks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
desc &amp;#39;[internal] This task does something useful but you should not invoke it manually&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_7"&gt;Executing commands&lt;/h2&gt;

&lt;p&gt;Running commands on the remote servers is easy. Capistrano&amp;#39;s &lt;code&gt;run&lt;/code&gt; method will execute the given command on every server the current task applies to. There are two more methods related to command execution that are very useful, though. &lt;/p&gt;

&lt;h3 id="toc_8"&gt;Running local commands&lt;/h3&gt;

&lt;p&gt;One of them is &lt;code&gt;run_locally&lt;/code&gt;. It behaves just like &lt;code&gt;run&lt;/code&gt;, except it will run the command on your machine. While it is of course possible to use Ruby&amp;#39;s various methods for command execution, &lt;code&gt;run_locally&lt;/code&gt; will ensure both the command and it&amp;#39;s output will show up cleanly aligned with all other output of the Capistrano run. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
run_locally &amp;#39;bundle exec rake deploy:prepare&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_9"&gt;Streaming output from remote servers&lt;/h3&gt;

&lt;p&gt;The other very useful method is &lt;code&gt;stream&lt;/code&gt;. It will execute the given command on every server the task applies to, but unlike the &lt;code&gt;run&lt;/code&gt; method it will stream the command&amp;#39;s output to your console. This allows you, for example, to peek into your log files in realtime. Combined with &lt;code&gt;grep&lt;/code&gt; and Rails&amp;#39; &lt;code&gt;ActiveSupport::TaggedLogging&lt;/code&gt; this helps a lot when debugging an issue that only shows up on your servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
stream &amp;quot;tail -f #{current_path}/log/#{rails_env}.log&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_10"&gt;Handling failing commands&lt;/h3&gt;

&lt;p&gt;When executing a remote command that fails, Capistrano will abort the deployment process. This makes sense in most cases, but wouldn&amp;#39;t it be nice to have a little more control over the behavior? Let&amp;#39;s say you want to check for the existence of a file on the remote server. One easy way to do this is the &lt;code&gt;test&lt;/code&gt; command. It&amp;#39;s exit code will be &lt;code&gt;0&lt;/code&gt; for success or &lt;code&gt;1&lt;/code&gt; for failure. Unfortunately this means one of the cases will cause the entire deployment process to fail. To prevent this, all you have to do is to rescue &lt;code&gt;Capistrano::CommandError&lt;/code&gt;. A practical example for this technique is this task, that checks if the server is in maintenance mode before running migrations. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
namespace :deploy do
  namespace :web do
    desc &amp;#39;[internal] Ensures that web is currently disabled&amp;#39;
    task :ensure do
      begin
        run &amp;quot;test -f #{shared_path}/system/maintenance.html&amp;quot;
      rescue Capistrano::CommandError
        unless fetch(:force, false)
          logger.important &amp;#39;You should disable the website using deploy:web:disable before doing this&amp;#39;
          exit
        end
      end
    end
  end
end

before &amp;#39;deploy:migrations&amp;#39;, &amp;#39;deploy:web:ensure&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_11"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is &amp;ndash; of course &amp;ndash; only a small subset of the useful features Capistrano provides. I hope I showed you one or two you haven&amp;#39;t known before. I encourage you to read through Capistrano&amp;#39;s &lt;a href="https://github.com/capistrano/capistrano"&gt;source code&lt;/a&gt; and &lt;a href="http://rubydoc.info/github/capistrano/capistrano/master/frames"&gt;API documentation&lt;/a&gt; to find more of these hidden features. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cleaner specs with custom RSpec example groups</title>
    <link rel="alternate" href="/2013/01/custom-rspec-example-groups/"/>
    <id>/2013/01/custom-rspec-example-groups/</id>
    <published>2013-01-09T00:00:00Z</published>
    <updated>2013-01-09T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;Sometimes, when testing your code with RSpec, you'll notice similarities and duplication between your spec files. Most of these will involve setup that doesn't say much about the object under test. There's something that helps you to reduce this duplication: Custom example groups! RSpec itself (rspec-rails) &lt;a href="https://github.com/rspec/rspec-rails/tree/master/lib/rspec/rails/example"&gt;uses example groups&lt;/a&gt; for the different types of tests for models, controllers, helpers and...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Sometimes, when testing your code with RSpec, you&amp;#39;ll notice similarities and duplication between your spec files. Most of these will involve setup that doesn&amp;#39;t say much about the object under test. There&amp;#39;s something that helps you to reduce this duplication: Custom example groups! RSpec itself (rspec-rails) &lt;a href="https://github.com/rspec/rspec-rails/tree/master/lib/rspec/rails/example"&gt;uses example groups&lt;/a&gt; for the different types of tests for models, controllers, helpers and views. In the following I&amp;#39;ll show you how to use them to reduce duplication and improve your tests.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;What are example groups?&lt;/h2&gt;

&lt;p&gt;An example group is defined by using RSpec&amp;#39;s &lt;code&gt;describe&lt;/code&gt; method (or its alias &lt;code&gt;context&lt;/code&gt;). It&amp;#39;s a subclass of &lt;a href="http://rubydoc.info/gems/rspec-core/RSpec/Core/ExampleGroup"&gt;&lt;code&gt;RSpec::Core::ExampleGroup&lt;/code&gt;&lt;/a&gt; and provides all the macro methods you&amp;#39;re used to in your specs. Additionally it provides a description, a set of metadata, and optionally a described class. It also knows about the examples defined using &lt;code&gt;it&lt;/code&gt; and how to run each of them with all hooks and stuff.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Customizing example groups&lt;/h2&gt;

&lt;p&gt;Now that you know about example groups, let&amp;#39;s start customizing them. As we&amp;#39;ve learned above, example groups are simple classes and therefore can be extended with modules. This happens to be the way rspec-rails is working as well. To illustrate the process, let&amp;#39;s look at an example.&lt;/p&gt;

&lt;h3 id="toc_2"&gt;A serializer example group&lt;/h3&gt;

&lt;p&gt;In a recent project, I was working with &lt;a href="https://github.com/rails-api/active_model_serializers"&gt;&lt;code&gt;ActiveModel::Serializers&lt;/code&gt;&lt;/a&gt;. In case you don&amp;#39;t know it, you should definitely have a look at it. In my opinion, it&amp;#39;s a great way to serialize your models into JSON. For our example we want to create a custom example group for serializers so we can test them like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
require &amp;#39;spec_helper&amp;#39;

describe UserSerializer do
  let(:attributes) { FactoryGirl.attributes_for(resource_name) }

  it { should have_key(:name) }
  it { should have_key(:email) }
  it { should have_key(:created_at) }
  it { should have_key(:updated_at) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to get there we create a new file called &lt;code&gt;spec/support/example_groups/serializer_example_group.rb&lt;/code&gt;. Then we define a new module called &lt;code&gt;SerializerExampleGroup&lt;/code&gt;. For convenience (and following the pattern of rspec-rails) we extend this module with &lt;code&gt;ActiveSupport::Concern&lt;/code&gt;. In addition we must tell RSpec to include this module into the example groups of all specs in the &lt;code&gt;spec/serializers&lt;/code&gt; folder and all specs explicitly setting &lt;code&gt;:type =&amp;gt; :serializer&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
module SerializerExampleGroup
  extend ActiveSupport::Concern

  RSpec.configure do |config|
    config.include self,
      :type =&amp;gt; :serializer,
      :example_group =&amp;gt; { :file_path =&amp;gt; %r(spec/serializers) }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_3"&gt;Adding custom behavior&lt;/h3&gt;

&lt;p&gt;That&amp;#39;s all we have to do to set up our custom example group. Next we add our desired custom behavior. We have to create a new instance of our serializer and pass a resource to serialize. The resource needs attributes and must implement a &lt;code&gt;read_attributes_for_serialization&lt;/code&gt; method. We can add all this by defining an &lt;code&gt;included&lt;/code&gt; block and use RSpec&amp;#39;s &lt;code&gt;let&lt;/code&gt; macro. In order to get the name of the resource that is serialized by the serializer under test we use RSpec&amp;#39;s &lt;code&gt;described_class&lt;/code&gt; method. It returns the class defined in the &lt;code&gt;describe UserSerializer&lt;/code&gt; statement. By converting its name to underscores, removing the &lt;code&gt;_serializer&lt;/code&gt; part and converting it into a symbol we get &lt;code&gt;:user&lt;/code&gt; as &lt;code&gt;resource_name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
included do
  let(:attributes) do
    {}
  end

  let(:resource_name) do
    described_class.name.underscore[0..-12].to_sym
  end

  let(:resource) do
    double(resource_name, attributes).tap do |double|
      double.stub(:read_attribute_for_serialization) { |name| attributes[name] }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we set the serialized hash as the subject for the example group. For convenience we also convert it into a &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; so we don&amp;#39;t have to think about using strings or symbols as keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
let(:serializer) { described_class.new(resource) }
subject { serializer.serializable_hash.with_indifferent_access }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_4"&gt;Adding some metadata&lt;/h3&gt;

&lt;p&gt;Now we have the desired custom behavior. To wrap things up, we add some metadata to the example group. In the &lt;code&gt;included&lt;/code&gt; block we have access to the &lt;code&gt;metadata&lt;/code&gt; method and are able to set the &lt;code&gt;:type&lt;/code&gt; to &lt;code&gt;:serializer&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
metadata[:type] = :serializer
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_5"&gt;The finished example group&lt;/h3&gt;

&lt;p&gt;All this results in a &lt;code&gt;spec/support/example_groups/serializer_example_group.rb&lt;/code&gt; file looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
module SerializerExampleGroup
  extend ActiveSupport::Concern

  included do
    metadata[:type] = :serializer

    let(:attributes) do
      {}
    end

    let(:resource_name) do
      described_class.name.underscore[0..-12].to_sym
    end

    let(:resource) do
      double(resource_name, attributes).tap do |double|
        double.stub(:read_attribute_for_serialization) { |name| attributes[name] }
      end
    end

    let(:serializer) { described_class.new(resource) }

    subject { serializer.serializable_hash.with_indifferent_access }
  end

  RSpec.configure do |config|
    config.include self,
      :type =&amp;gt; :serializer,
      :example_group =&amp;gt; { :file_path =&amp;gt; %r(spec/serializers) }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this custom example group in place, testing the serializers gets much easier. Of course, this is only one example of what you can do. Instead of adding a lot of setup you might only use this to add metadata (such as tags) to specs in a specific folder.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I'm joining flinc as a Rails developer</title>
    <link rel="alternate" href="/2010/11/i-m-joining-flinc-as-a-rails-developer/"/>
    <id>/2010/11/i-m-joining-flinc-as-a-rails-developer/</id>
    <published>2010-11-01T00:00:00Z</published>
    <updated>2010-11-01T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://flinc.org"&gt;&lt;img src="/assets/2010/11/flinc.png" style="float: right" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today’s my first day as a full-time employee at
&lt;a href="http://flinc.org"&gt;flinc&lt;/a&gt; where I’ll mainly be doing Ruby on Rails
development. I got in contact with &lt;a href="http://twitter.com/m_ic"&gt;Michael&lt;/a&gt; a
few months back when he joined the &lt;a href="http://webdevfulda.de"&gt;Web Development
Fulda&lt;/a&gt; group on Xing. We met at the meetup in
september and a few days later he invited me to their offices in
Dieburg. I was impressed by their product and the spirit of the
&lt;a href="http://flinc.org/theflincteam"&gt;team&lt;/a&gt;, so I agreed on
doing trial work for a week. Obviously they liked me and my work and
offered me a job.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://flinc.org"&gt;&lt;img src="/assets/2010/11/flinc.png" style="float: right" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today’s my first day as a full-time employee at
&lt;a href="http://flinc.org"&gt;flinc&lt;/a&gt; where I’ll mainly be doing Ruby on Rails
development. I got in contact with &lt;a href="http://twitter.com/m_ic"&gt;Michael&lt;/a&gt; a
few months back when he joined the &lt;a href="http://webdevfulda.de"&gt;Web Development
Fulda&lt;/a&gt; group on Xing. We met at the meetup in
september and a few days later he invited me to their offices in
Dieburg. I was impressed by their product and the spirit of the
&lt;a href="http://flinc.org/theflincteam"&gt;team&lt;/a&gt;, so I agreed on
doing trial work for a week. Obviously they liked me and my work and
offered me a job.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="toc_0"&gt;About flinc&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“flinc arranges spontaneous rideshares in realtime. Directly on your
navigation system in your car.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea of &lt;a href="http://flinc.org"&gt;flinc&lt;/a&gt; is to connect smartphones with
satellite navigation systems to arrange rideshares in realtime. For
riders this results in an alternative to an own car, for drivers it’s an
easy way to reduce their costs.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://flinc.org/"&gt;&lt;img src="/assets/2010/11/how_flinc_works_en.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;flinc is currently tested in the city of Friedrichshafen and is planned
to be rolled out in several innovation regions in 2011. Head over to
&lt;a href="http://flinc.org"&gt;flinc.org&lt;/a&gt; to register and get more information.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Pair with me!&lt;/h2&gt;

&lt;p&gt;As I’m the third developer at flinc, we’re looking for another Ruby on
Rails developer to join the team. If you’re interested in pair
programming with me (or of course one of the other developers) while
working on an exciting product, send a mail to
&lt;a href="mailto:michael.huebl@flincteam.org"&gt;Michael&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Multitouch Inspector for iPad</title>
    <link rel="alternate" href="/2010/06/multitouch-inspector-for-ipad/"/>
    <id>/2010/06/multitouch-inspector-for-ipad/</id>
    <published>2010-06-24T00:00:00Z</published>
    <updated>2010-06-24T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/assets/2010/06/icon.png" style="float: right" /&gt;&lt;/p&gt;

&lt;p&gt;During the last couple weeks I&amp;#39;ve been playing around with the iPad and
Mobile Safari. I built a little tool to familiarize myself with the
Multitouch JavaScript API provided by Mobile Safari as well as web
applications for the iPad in general. I named the result &lt;a href="/assets/2010/06/index.html"&gt;Multitouch
Inspector&lt;/a&gt; because
that&amp;#39;s what it does: Inspect the TouchEvents fired by the JavaScript
API. ;-) Today I decided to rewrite the tool to drop the dependency on
&lt;a href="http://prototypejs.org"&gt;Prototype.js&lt;/a&gt; and I published it on
&lt;a href="http://github.com/benedikt/multitouch-inspector"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img src="/assets/2010/06/icon.png" style="float: right" /&gt;&lt;/p&gt;

&lt;p&gt;During the last couple weeks I&amp;#39;ve been playing around with the iPad and
Mobile Safari. I built a little tool to familiarize myself with the
Multitouch JavaScript API provided by Mobile Safari as well as web
applications for the iPad in general. I named the result &lt;a href="/assets/2010/06/index.html"&gt;Multitouch
Inspector&lt;/a&gt; because
that&amp;#39;s what it does: Inspect the TouchEvents fired by the JavaScript
API. ;-) Today I decided to rewrite the tool to drop the dependency on
&lt;a href="http://prototypejs.org"&gt;Prototype.js&lt;/a&gt; and I published it on
&lt;a href="http://github.com/benedikt/multitouch-inspector"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Using Multitouch Events from JavaScript&lt;/h2&gt;

&lt;p&gt;There are four events that are related to touch: &lt;code&gt;TouchStart&lt;/code&gt;, &lt;code&gt;TouchMove&lt;/code&gt;,
&lt;code&gt;TouchEnd&lt;/code&gt; and &lt;code&gt;TouchCancel&lt;/code&gt;. I&amp;#39;m not sure about what situation would
trigger &lt;code&gt;TouchCancel&lt;/code&gt; so I decided to skip it for now. Working with the
touch events is straight forward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::javascript
document.addEventListener(&amp;#39;touchstart&amp;#39;, function(event) {
  // Do whatever you&amp;#39;d like to do with the event
}, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course you can add the listener to any element just like you would
with &lt;code&gt;Click&lt;/code&gt; or &lt;code&gt;MouseOver&lt;/code&gt; events. The function gets passed an object
of type &lt;code&gt;TouchEvent&lt;/code&gt;. There are several properties on this object, but
the most interesting ones are &lt;code&gt;Touches&lt;/code&gt;, &lt;code&gt;changedTouches&lt;/code&gt; and
&lt;code&gt;targetTouches&lt;/code&gt;. They all are of type &lt;code&gt;TouchList&lt;/code&gt; and contain several
&lt;code&gt;Touch&lt;/code&gt; objects. The &lt;code&gt;touches&lt;/code&gt; property lists all touches currently on
the screen. The &lt;code&gt;changedTouches&lt;/code&gt; list contains the touches that changed
and caused the event to fire. The touches in the &lt;code&gt;targetTouches&lt;/code&gt; list
are those that are currently within the target element.&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;Touch&lt;/code&gt; has an &lt;code&gt;identifier&lt;/code&gt; property as well as &lt;code&gt;pageX&lt;/code&gt; and &lt;code&gt;pageY&lt;/code&gt;
properties. As you might have guessed already, the &lt;code&gt;pageX&lt;/code&gt; and &lt;code&gt;pageY&lt;/code&gt;
properties include the touch&amp;#39;s position on the screen. The &lt;code&gt;identifier&lt;/code&gt;
property provides an unique integer for this touch. It stays the the
same for this touch as long it is on the screen. This is particularly
useful as removing one finger will trigger a &lt;code&gt;TouchEnd&lt;/code&gt; event that implies
that all fingers were removed, immediately followed by a &lt;code&gt;TouchStart&lt;/code&gt;
event including the remaining fingers. Luckily the identifier property
stays the same for those fingers that weren&amp;#39;t removed from the screen.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Offline Application Caching&lt;/h2&gt;

&lt;p&gt;In order to use the application without having an active internet
connection or simply while the development server isn&amp;#39;t running I&amp;#39;m
using &lt;a href="http://www.w3.org/TR/offline-webapps/#offline"&gt;HTML5 Offline Application
Caching&lt;/a&gt;. It works by
defining a manifest file and referencing it in the html-tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html manifest=&amp;quot;application.manifest&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The manifest file itself looks like this and defines what files are
required to view the application while offline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CACHE MANIFEST

# c94640e9114e05f16e189605e5b65ba2357117712c949cae92cc29bc1bbd3c47
/images/background.png
/images/icon.png
/index.html
/javascripts/application.js
/stylesheets/application.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might wonder about the random string at the top. As the browser will
reload everything when it can&amp;#39;t find one file in it&amp;#39;s cache, I&amp;#39;m using
this string to force a reload during development. I built a small
Sinatra app (see the listing below this paragraph) that generates the
manifest and resets this string for every request. As a result, the
browser reloads everything while online but falls back to the cached
files when offline.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
require &amp;#39;sinatra&amp;#39;
require &amp;#39;digest/sha2&amp;#39;
require &amp;#39;pathname&amp;#39;

get &amp;#39;/application.manifest&amp;#39; do
  content_type &amp;#39;text/cache-manifest&amp;#39;

  manifest = &amp;quot;CACHE MANIFEST\n\n&amp;quot;
  manifest &amp;lt;&amp;lt; &amp;quot;#&amp;quot; &amp;lt;&amp;lt; Digest::SHA2.hexdigest(Time.now.to_s + Time.now.usec.to_s) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;

  root = Pathname.new(settings.public)
  Pathname.glob(File.join(root, &amp;quot;**&amp;quot;, &amp;quot;*&amp;quot;)).each do |p|
    manifest &amp;lt;&amp;lt; &amp;quot;/&amp;quot; &amp;lt;&amp;lt; p.relative_path_from(root) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot; if p.file?
  end

  manifest
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_2"&gt;Issues&lt;/h2&gt;

&lt;p&gt;There are some issues that I couldn&amp;#39;t resolve while building the
application. The startup image will only work while in portrait
orientation and its dimension has to be exactly 1004x768. Currently
there isn&amp;#39;t a way to define a startup image for horizontal orientation.&lt;/p&gt;

&lt;p&gt;While the tracking of the touches works on the iPhone (with iOS 4.0) as
well for some reason it isn&amp;#39;t possible to press the buttons in the
toolbar. At the moment I have no explanation for this rather strange
behavior, but I might take another look at it in the future.&lt;/p&gt;

&lt;h2 id="toc_3"&gt;Screenshot &amp;amp; Demo&lt;/h2&gt;

&lt;p&gt;Now that you have some insights on the internals of the application,
here&amp;#39;s a screenshot as well as a link on it to a demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="/assets/2010/06/index.html"&gt;&lt;img src="/assets/2010/06/multitouch-inspector_medium.png" alt="Screenshot of the Multitouch Inspector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="toc_4"&gt;Fork it on GitHub&lt;/h2&gt;

&lt;p&gt;I published the source code on
&lt;a href="http://github.com/benedikt/multitouch-inspector"&gt;GitHub&lt;/a&gt;. Feel free to
fork it!&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Further reading&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="http://developer.apple.com/safari/library/documentation/appleapplications/reference/safariwebcontent/handlingevents/handlingevents.html#//apple_ref/doc/uid/TP40006511-SW22"&gt;Safari Web Content Guide: Handling
Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="http://mir.aculo.us/2010/06/04/making-an-ipad-html5-app-making-it-really-fast/"&gt;Making an iPad HTML5 App &amp;amp; making it really
fast&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>RSpec and Rails Helpers using the output buffer</title>
    <link rel="alternate" href="/2009/08/rspec-and-rails-helpers-using-the-output-buffer/"/>
    <id>/2009/08/rspec-and-rails-helpers-using-the-output-buffer/</id>
    <published>2009-08-25T00:00:00Z</published>
    <updated>2009-08-25T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;When testing helper methods that use Rails&amp;#39; output buffer (for example
by calling &lt;code&gt;concat&lt;/code&gt;) with RSpec, be sure to add this to your specs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
before (:each) do 
  helper.output_buffer = &amp;quot;&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Took me a while to figure this one out. Apparently RSpec doesn&amp;#39;t
initialize the output buffer and you end up with a &lt;code&gt;NoMethodError&lt;/code&gt; on &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;When testing helper methods that use Rails&amp;#39; output buffer (for example
by calling &lt;code&gt;concat&lt;/code&gt;) with RSpec, be sure to add this to your specs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
before (:each) do 
  helper.output_buffer = &amp;quot;&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Took me a while to figure this one out. Apparently RSpec doesn&amp;#39;t
initialize the output buffer and you end up with a &lt;code&gt;NoMethodError&lt;/code&gt; on &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Commander: command-line executables in Ruby</title>
    <link rel="alternate" href="/2009/03/commander-command-line-executables-in-ruby/"/>
    <id>/2009/03/commander-command-line-executables-in-ruby/</id>
    <published>2009-03-19T00:00:00Z</published>
    <updated>2009-03-19T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;I'm currently building a tool to help managing severals servers
simultaneously for &lt;a href="http://www.softvision-media.de/"&gt;Softvision Media&lt;/a&gt;.
As I decided to write the tool in Ruby, I've been looking for a
framework to create command-line executables. On GitHub I stumbled over
&lt;a href="http://github.com/visionmedia/commander/tree/master"&gt;commander&lt;/a&gt; by TJ
Holowaychuk of &lt;a href="http://vision-media.ca/"&gt;VisionMedia&lt;/a&gt; that provides a
simple DSL for this task. It integrates with OptionParser and the
Highline gem for user interaction. It...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m currently building a tool to help managing severals servers
simultaneously for &lt;a href="http://www.softvision-media.de/"&gt;Softvision Media&lt;/a&gt;.
As I decided to write the tool in Ruby, I&amp;#39;ve been looking for a
framework to create command-line executables. On GitHub I stumbled over
&lt;a href="http://github.com/visionmedia/commander/tree/master"&gt;commander&lt;/a&gt; by TJ
Holowaychuk of &lt;a href="http://vision-media.ca/"&gt;VisionMedia&lt;/a&gt; that provides a
simple DSL for this task. It integrates with OptionParser and the
Highline gem for user interaction. It automatically creates common
options such as &lt;code&gt;--help&lt;/code&gt; and &lt;code&gt;--version&lt;/code&gt;, as well as detailed
descriptions about possible commands.&lt;/p&gt;

&lt;p&gt;A simple executable could be something like this (taken from commander&amp;#39;s
readme):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
require &amp;#39;rubygems&amp;#39;
require &amp;#39;commander&amp;#39;

program :name, &amp;#39;Foo Bar&amp;#39;
program :version, &amp;#39;1.0.0&amp;#39;
program :description, &amp;#39;Stupid command that prints foo or bar.&amp;#39;

command :foo do |c|
  c.syntax = &amp;#39;foobar foo&amp;#39;
  c.description = &amp;#39;Displays foo&amp;#39;
  c.when_called do |args, options|
    say &amp;#39;foo&amp;#39;
  end
end

command :bar do |c|
  c.syntax = &amp;#39;foobar bar [options]&amp;#39;
  c.description = &amp;#39;Display bar with optional prefix and suffix&amp;#39;
  c.option &amp;#39;--prefix STRING&amp;#39;, String, &amp;#39;Adds a prefix to bar&amp;#39;
  c.option &amp;#39;--suffix STRING&amp;#39;, String, &amp;#39;Adds a suffix to bar&amp;#39;
  c.when_called do |args, options|
    options.default :prefix =&amp;gt; &amp;#39;(&amp;#39;, :suffix =&amp;gt; &amp;#39;)&amp;#39;
    say &amp;quot;#{options.prefix}bar#{options.suffix}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are still some rough edges, but in general it works pretty well.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>HowTo: Phusion Passenger aka mod_rails for Apache</title>
    <link rel="alternate" href="/2008/08/howto-phusion-passenger-aka-mod_rails-for-apache/"/>
    <id>/2008/08/howto-phusion-passenger-aka-mod_rails-for-apache/</id>
    <published>2008-08-08T00:00:00Z</published>
    <updated>2008-08-08T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;p&gt;Yesterday I decided to give &lt;a href="http://www.modrails.com"&gt;Phusion Passenger aka
mod_rails&lt;/a&gt; a try and installed it. It was dead
simple to set it up and to deploy rails applications with it. I'm now
using it for several “small” applications, for which the whole overhead
of setting up a cluster of mongrels and a proxy doesn't seem to be
adequate. I'll give you a short summary on how to install mod_rails for
apache2 on Debian Etch...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Yesterday I decided to give &lt;a href="http://www.modrails.com"&gt;Phusion Passenger aka
mod_rails&lt;/a&gt; a try and installed it. It was dead
simple to set it up and to deploy rails applications with it. I&amp;#39;m now
using it for several &amp;ldquo;small&amp;rdquo; applications, for which the whole overhead
of setting up a cluster of mongrels and a proxy doesn&amp;#39;t seem to be
adequate. I&amp;#39;ll give you a short summary on how to install mod_rails for
apache2 on Debian Etch.&lt;/p&gt;

&lt;p&gt;First, install the passenger gem using
&lt;a href="http://www.rubygems.org/"&gt;RubyGems&lt;/a&gt; (if you don&amp;#39;t have Ruby and
RubyGems running on your server, install them first - of course):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::shell-unix-generic
gem install passenger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards, run the passenger apache2 module installer using this
command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::shell-unix-generic
passenger-install-apache2-module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#39;ll check for the required software to install the module, compile it
and copy it to the correct folders. If some software is missing install
it using &lt;code&gt;aptitude&lt;/code&gt; (ie. &lt;code&gt;aptitude install g++&lt;/code&gt; if
you&amp;#39;re missing the GNU C++ Compiler).&lt;/p&gt;

&lt;p&gt;Next, create two new files in the
&lt;code&gt;/etc/apache2/mods-available&lt;/code&gt; directory. One called
&lt;code&gt;mod_rails.load&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::apache
LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.0.2/ext/apache2/mod_passenger.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and the other one called &lt;code&gt;mod_rails.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::apache
PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger–2.0.2
PassengerRuby /usr/bin/ruby1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can enable the module using &lt;code&gt;a2enmod&lt;/code&gt; and restart
apache.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::shell-unix-generic
a2enmod mod_rails
apache2ctl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#39;s it! Now simply deploy your rails application, just make sure
apache&amp;#39;s document root is pointing to your applications
&lt;code&gt;public&lt;/code&gt; folder. Passenger will automatically detect your
rails application and start up processes as needed. You can check it&amp;#39;s
status and stats using the &lt;code&gt;passenger-status&lt;/code&gt; and
&lt;code&gt;passenger-memory-stats&lt;/code&gt; commands. For more details on
mod_rails, take a look at it&amp;#39;s &lt;a href="http://modrails.com/documentation.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My day-to-day resources on Ruby and Rails</title>
    <link rel="alternate" href="/2008/08/my-day-to-day-resources-on-ruby-and-rails/"/>
    <id>/2008/08/my-day-to-day-resources-on-ruby-and-rails/</id>
    <published>2008-08-04T00:00:00Z</published>
    <updated>2008-08-04T00:00:00Z</updated>
    <author>
      <name>Benedikt Deicke</name>
    </author>
    <summary type="html">&lt;h2 id="toc_0"&gt;News&lt;/h2&gt;

&lt;p&gt;I try to keep up with Ruby and Ruby on Rails, even if I’m not working
with one of them at the moment. These are the three feeds helping me to
get the latest news:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/2008/08/planetrubyonrails.png" alt="image"&gt;:&lt;a href="http://planetrubyonrails.com"&gt;http://planetrubyonrails.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PlanetRubyOnRails.com, not to be mixed up with
PlanetRubyOnRails.**org**, is a simple feed aggregator with a set of
quite informative blogs. Including the official &lt;a href="http://blog.rubyonrails.com"&gt;Riding
Rails&lt;/a&gt; Blog, &lt;a href="http://www.rubyinside.com"&gt;Ruby
Inside&lt;/a&gt;, and...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="toc_0"&gt;News&lt;/h2&gt;

&lt;p&gt;I try to keep up with Ruby and Ruby on Rails, even if I’m not working
with one of them at the moment. These are the three feeds helping me to
get the latest news:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/2008/08/planetrubyonrails.png" alt="image"&gt;:&lt;a href="http://planetrubyonrails.com"&gt;http://planetrubyonrails.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PlanetRubyOnRails.com, not to be mixed up with
PlanetRubyOnRails.**org**, is a simple feed aggregator with a set of
quite informative blogs. Including the official &lt;a href="http://blog.rubyonrails.com"&gt;Riding
Rails&lt;/a&gt; Blog, &lt;a href="http://www.rubyinside.com"&gt;Ruby
Inside&lt;/a&gt;, and &lt;a href="http://www.infoq.com"&gt;InfoQ&lt;/a&gt;.
Unfortunately it doesn’t provide an RSS-Feed anymore, but thanks to
&lt;a href="http://feed43.com/"&gt;Feed43&lt;/a&gt; it’s easy to build one on your own.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/2008/08/rails_envy_logo.gif" alt="image"&gt;:&lt;a href="http://railsenvy.com"&gt;http://railsenvy.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every Wednesday Gregg Pollack and Jason Seifer of &lt;a href="http://www.railsenvy.com"&gt;Rails
Envy&lt;/a&gt; publish their Rails Envy Podcast,
covering last week’s most important topics in the Ruby and Rails
community. They’re giving a short summary for every topic, together with
a link in their &lt;em&gt;shownotes&lt;/em&gt; and usually are fooling around. The
podcast’s length is usually between 10 to 15 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://planet.rubyonrails-ug.de/"&gt;&lt;strong&gt;RubyOnRails-Ug Planet&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like PlanetRubyOnRails, the planet of the german ruby on rails
usergroup is a feed aggregator, except it includes blogs of members of
the german Ruby on Rails community. (Yes, mine too …) Its far from being
as active as the international one, but usually includes interesting
posts.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Documentation&lt;/h2&gt;

&lt;p&gt;When I’m working on Ruby and Ruby on Rails code, I use there resources
to quickly look up documentation:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/2008/08/rubydoc.png" alt="image"&gt;:&lt;a href="http://ruby-doc.org"&gt;http://ruby-doc.org&lt;/a&gt;/&lt;/p&gt;

&lt;p&gt;Ruby-Doc.org provides the documentation for both Ruby’s
&lt;a href="http://ruby-doc.org/core"&gt;Core&lt;/a&gt; and
&lt;a href="http://ruby-doc.org/stdlib"&gt;Stdlib&lt;/a&gt;. The documentation is in the
default RDoc format, so I usually end up hitting [Strg]+[F] and using my
browsers search function to quickly get to the relevant sections.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://api.rubyonrails.com/"&gt;&lt;strong&gt;api.rubyonrails.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What Ruby-Doc.org is for ruby,
&lt;a href="http://api.rubyonrails.com/"&gt;api.rubyonrails.com&lt;/a&gt; is for rails. It’s
the standard rails documentation in the default RDoc format. As with
Ruby-Doc.org I use my browsers search to quickly find what I’m looking
for.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/2008/08/rails-doc.png" alt="image"&gt;:&lt;a href="http://rails-doc.org"&gt;http://rails-doc.org&lt;/a&gt;/&lt;/p&gt;

&lt;p&gt;Rails-Doc.org is a quite new site providing the full rails
documentation. Unlike the default API documentation site (see above) it
also includes documentation of older rails versions. Additionally it has
a nice search engine, and adds the ability to post notes. There are
other sites providing similar functionality for the rails documentation,
but somehow Rails-Doc.org just feels right and I’m using more and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gem Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Did you know the fabulous &lt;a href="http://www.rubygems.org/"&gt;RubyGem-Tools&lt;/a&gt;
provide a server including the documentation for all your installed
gems? Simple run &lt;code&gt;gem server&lt;/code&gt; on the console, fire up your
browser and navigate to &lt;a href="http://localhost:8808"&gt;http://localhost:8808&lt;/a&gt;.
Okay, it’s just the standard RDoc documentation for each gem, without
any fancy search or anything … but who cares if you’re somewhere in the
middle of nowhere with no internet connection? :-)&lt;/p&gt;

&lt;h2 id="toc_2"&gt;Other&lt;/h2&gt;

&lt;p&gt;&lt;img src="/assets/2008/08/railscasts.png" alt="image"&gt;:&lt;a href="http://www.railscasts.com"&gt;http://www.railscasts.com&lt;/a&gt;/&lt;/p&gt;

&lt;p&gt;Last but definitely not least, are the RailsCasts by Ryan Bates. Every
Monday he publishes a approx. 5 to 10 minute screencast on a variety of
topics related to rails development. If you haven’t seen one of them
yet, don’t hesitate any longer. Ryan’s explanations are concise and
based on practical examples.&lt;/p&gt;

&lt;p&gt;What are your resources on Ruby / Rails? Which blogs are you reading to
stay up-to-date? Which documentation are you using? I’m interested in
your comments (there are way to few anyways … ;-))!&lt;/p&gt;

&lt;h2 id="toc_3"&gt;Update (Aug 15.)&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://blog.nodeta.fi/"&gt;Nodeta&lt;/a&gt;, creators of Rails-Doc.org, released
&lt;a href="http://www.apidock.com/"&gt;APIdock&lt;/a&gt; yesterday. APIdock extends the
Rails-Doc.org concept to multiple projects. Currently Rails, Ruby and
RSpec are included.&lt;/p&gt;
</content>
  </entry>
</feed>
